{
  "id": "dc24fd9b-f4ec-445d-bbe2-e06c29deaacf",
  "prevId": "bf9a6140-3787-4bd3-8598-8f0104ac8e74",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.api_keys": {
      "name": "api_keys",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "project_id": {
          "name": "project_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "name": {
          "name": "name",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "api_key_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'active'"
        },
        "prefix": {
          "name": "prefix",
          "type": "varchar(15)",
          "primaryKey": false,
          "notNull": true
        },
        "hash": {
          "name": "hash",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "expires_at": {
          "name": "expires_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "revoked_at": {
          "name": "revoked_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "revoked_by": {
          "name": "revoked_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "ux_api_keys_prefix": {
          "name": "ux_api_keys_prefix",
          "columns": [
            {
              "expression": "prefix",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ux_api_keys_hash": {
          "name": "ux_api_keys_hash",
          "columns": [
            {
              "expression": "hash",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_api_keys_project": {
          "name": "idx_api_keys_project",
          "columns": [
            {
              "expression": "project_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "api_keys_project_id_projects_id_fk": {
          "name": "api_keys_project_id_projects_id_fk",
          "tableFrom": "api_keys",
          "tableTo": "projects",
          "columnsFrom": [
            "project_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "api_keys_created_by_profiles_id_fk": {
          "name": "api_keys_created_by_profiles_id_fk",
          "tableFrom": "api_keys",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "api_keys_revoked_by_profiles_id_fk": {
          "name": "api_keys_revoked_by_profiles_id_fk",
          "tableFrom": "api_keys",
          "tableTo": "profiles",
          "columnsFrom": [
            "revoked_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "API Keys are visible to a project's owner or the organization's members": {
          "name": "API Keys are visible to a project's owner or the organization's members",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      EXISTS (\n        SELECT 1\n        FROM projects\n        WHERE projects.id = api_keys.project_id\n          AND (\n            projects.profile_id = auth.uid()\n            OR (\n              projects.organization_id IN (\n                SELECT organization_id\n                FROM organization_members\n                WHERE profile_id = auth.uid()\n              )\n            )\n          )\n      )\n    "
        },
        "API Keys are manageable by a project's owner or the organization's admins": {
          "name": "API Keys are manageable by a project's owner or the organization's admins",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\n      EXISTS (\n        SELECT 1\n        FROM projects\n        WHERE projects.id = api_keys.project_id\n          AND (\n            projects.profile_id = auth.uid()\n            OR (\n              projects.organization_id IN (\n                SELECT organization_id\n                FROM organization_members\n                WHERE profile_id = auth.uid()\n                  AND role = 'admin'\n              )\n            )\n          )\n      )\n    "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.credit_ledger": {
      "name": "credit_ledger",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "delta": {
          "name": "delta",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "balance": {
          "name": "balance",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "reason": {
          "name": "reason",
          "type": "credit_ledger_reason",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'{}'::jsonb"
        },
        "recorded_at": {
          "name": "recorded_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_credit_ledger_profile": {
          "name": "idx_credit_ledger_profile",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_credit_ledger_org": {
          "name": "idx_credit_ledger_org",
          "columns": [
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_credit_ledger_time": {
          "name": "idx_credit_ledger_time",
          "columns": [
            {
              "expression": "recorded_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_credit_ledger_reason": {
          "name": "idx_credit_ledger_reason",
          "columns": [
            {
              "expression": "reason",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_credit_ledger_profile_time": {
          "name": "idx_credit_ledger_profile_time",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "recorded_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_credit_ledger_org_time": {
          "name": "idx_credit_ledger_org_time",
          "columns": [
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "recorded_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "credit_ledger_profile_id_profiles_id_fk": {
          "name": "credit_ledger_profile_id_profiles_id_fk",
          "tableFrom": "credit_ledger",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "credit_ledger_organization_id_organizations_id_fk": {
          "name": "credit_ledger_organization_id_organizations_id_fk",
          "tableFrom": "credit_ledger",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Credit Ledger is visible to the individual or org. members": {
          "name": "Credit Ledger is visible to the individual or org. members",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      profile_id = auth.uid()\n      OR\n      organization_id IN (\n        SELECT organization_id FROM organization_members\n        WHERE profile_id = auth.uid()\n      )\n    "
        }
      },
      "checkConstraints": {
        "check_credit_one_owner": {
          "name": "check_credit_one_owner",
          "value": "\n            (profile_id IS NOT NULL AND organization_id IS NULL)\n            OR \n            (profile_id IS NULL AND organization_id IS NOT NULL)\n          "
        },
        "chk_credit_balance_nonnegative": {
          "name": "chk_credit_balance_nonnegative",
          "value": "balance >= 0"
        }
      },
      "isRLSEnabled": false
    },
    "public.organization_members": {
      "name": "organization_members",
      "schema": "",
      "columns": {
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "role": {
          "name": "role",
          "type": "organization_role",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'member'"
        },
        "invited_by": {
          "name": "invited_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "joined_at": {
          "name": "joined_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_org_members_unique": {
          "name": "ux_org_members_unique",
          "columns": [
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_org_members_profile": {
          "name": "idx_org_members_profile",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "organization_members_organization_id_organizations_id_fk": {
          "name": "organization_members_organization_id_organizations_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "organization_members_profile_id_profiles_id_fk": {
          "name": "organization_members_profile_id_profiles_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "organization_members_invited_by_profiles_id_fk": {
          "name": "organization_members_invited_by_profiles_id_fk",
          "tableFrom": "organization_members",
          "tableTo": "profiles",
          "columnsFrom": [
            "invited_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Organization Members: Organization members are visible to org peers": {
          "name": "Organization Members: Organization members are visible to org peers",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "is_member_of_org(organization_id)"
        },
        "Organization Members: Organization admins can manage org members (add, update, delete)": {
          "name": "Organization Members: Organization admins can manage org members (add, update, delete)",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\n      role = 'admin'\n      AND \n      is_member_of_org(organization_id)\n      \n    "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.organizations": {
      "name": "organizations",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "logo_url": {
          "name": "logo_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "active_plan_id": {
          "name": "active_plan_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "tier": {
          "name": "tier",
          "type": "tier_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'free'"
        },
        "credit_balance": {
          "name": "credit_balance",
          "type": "numeric(12, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "credit_balance_updated_at": {
          "name": "credit_balance_updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "credit_auto_refill_enabled": {
          "name": "credit_auto_refill_enabled",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "credit_auto_refill_amount": {
          "name": "credit_auto_refill_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_subscription_id": {
          "name": "stripe_subscription_id",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_active_plan": {
          "name": "stripe_active_plan",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_plan_status": {
          "name": "stripe_plan_status",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": false
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "website": {
          "name": "website",
          "type": "varchar(200)",
          "primaryKey": false,
          "notNull": false
        },
        "contact_email": {
          "name": "contact_email",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "phone": {
          "name": "phone",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": false
        },
        "address": {
          "name": "address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_by": {
          "name": "created_by",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_orgs_slug": {
          "name": "ux_orgs_slug",
          "columns": [
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_orgs_active_plan": {
          "name": "idx_orgs_active_plan",
          "columns": [
            {
              "expression": "active_plan_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "organizations_active_plan_id_plans_id_fk": {
          "name": "organizations_active_plan_id_plans_id_fk",
          "tableFrom": "organizations",
          "tableTo": "plans",
          "columnsFrom": [
            "active_plan_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "organizations_created_by_profiles_id_fk": {
          "name": "organizations_created_by_profiles_id_fk",
          "tableFrom": "organizations",
          "tableTo": "profiles",
          "columnsFrom": [
            "created_by"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Orgs are visible to both the creator of the org and its members.": {
          "name": "Orgs are visible to both the creator of the org and its members.",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      created_by = auth.uid()\n      OR id IN (\n        SELECT organization_id\n        FROM organization_members\n        WHERE profile_id = auth.uid()\n      )\n    "
        },
        "Only the creator can update or delete the org.": {
          "name": "Only the creator can update or delete the org.",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "created_by = auth.uid()"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.tier_rate_limits": {
      "name": "tier_rate_limits",
      "schema": "",
      "columns": {
        "plan_id": {
          "name": "plan_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "metric": {
          "name": "metric",
          "type": "rate_metric",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "value": {
          "name": "value",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "granularity": {
          "name": "granularity",
          "type": "granularity",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'all_time'"
        }
      },
      "indexes": {
        "ux_plan_metric_granularity": {
          "name": "ux_plan_metric_granularity",
          "columns": [
            {
              "expression": "plan_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "metric",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "granularity",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "tier_rate_limits_plan_id_plans_id_fk": {
          "name": "tier_rate_limits_plan_id_plans_id_fk",
          "tableFrom": "tier_rate_limits",
          "tableTo": "plans",
          "columnsFrom": [
            "plan_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Plan limits are readable by anyone": {
          "name": "Plan limits are readable by anyone",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "anon"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.plans": {
      "name": "plans",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "type": {
          "name": "type",
          "type": "plan_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "currently_available": {
          "name": "currently_available",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": true
        },
        "features": {
          "name": "features",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_plan_type_name": {
          "name": "ux_plan_type_name",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "name",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ux_default_plan_by_type": {
          "name": "ux_default_plan_by_type",
          "columns": [
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "where": "is_default = true",
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Plans are readable by anyone": {
          "name": "Plans are readable by anyone",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "anon"
          ],
          "using": "true"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.profiles": {
      "name": "profiles",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "first_name": {
          "name": "first_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_name": {
          "name": "last_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "account_type": {
          "name": "account_type",
          "type": "account_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'individual'"
        },
        "completed_quickstart": {
          "name": "completed_quickstart",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "tier": {
          "name": "tier",
          "type": "tier_enum",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'free'"
        },
        "active_plan_id": {
          "name": "active_plan_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "credit_balance": {
          "name": "credit_balance",
          "type": "numeric(12, 2)",
          "primaryKey": false,
          "notNull": true,
          "default": "'0'"
        },
        "credit_balance_updated_at": {
          "name": "credit_balance_updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "credit_auto_refill_enabled": {
          "name": "credit_auto_refill_enabled",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "credit_auto_refill_amount": {
          "name": "credit_auto_refill_amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_subscription_id": {
          "name": "stripe_subscription_id",
          "type": "varchar(255)",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_active_plan": {
          "name": "stripe_active_plan",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_plan_status": {
          "name": "stripe_plan_status",
          "type": "varchar(20)",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_profiles_email": {
          "name": "ux_profiles_email",
          "columns": [
            {
              "expression": "email",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_profiles_active_plan": {
          "name": "idx_profiles_active_plan",
          "columns": [
            {
              "expression": "active_plan_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "profiles_active_plan_id_plans_id_fk": {
          "name": "profiles_active_plan_id_plans_id_fk",
          "tableFrom": "profiles",
          "tableTo": "plans",
          "columnsFrom": [
            "active_plan_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "profiles_id_users_id_fk": {
          "name": "profiles_id_users_id_fk",
          "tableFrom": "profiles",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Select your own profile or your organization's members.": {
          "name": "Select your own profile or your organization's members.",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      auth.uid() = id\n      OR\n      (\n        account_type = 'org_member'\n        AND id IN (\n          SELECT profile_id\n          FROM organization_members\n          WHERE organization_id IN (\n            SELECT organization_id\n            FROM organization_members\n            WHERE profile_id = auth.uid()\n          )\n        )\n      )\n    "
        },
        "Update your own profile. Not allowed to update org-only members.": {
          "name": "Update your own profile. Not allowed to update org-only members.",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "auth.uid() = id",
          "withCheck": "auth.uid() = id"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.projects": {
      "name": "projects",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "name": {
          "name": "name",
          "type": "varchar(100)",
          "primaryKey": false,
          "notNull": true
        },
        "slug": {
          "name": "slug",
          "type": "varchar(50)",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "archived_at": {
          "name": "archived_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_projects_owner_slug": {
          "name": "ux_projects_owner_slug",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_projects_profile": {
          "name": "idx_projects_profile",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_projects_organization": {
          "name": "idx_projects_organization",
          "columns": [
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "projects_profile_id_profiles_id_fk": {
          "name": "projects_profile_id_profiles_id_fk",
          "tableFrom": "projects",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "projects_organization_id_organizations_id_fk": {
          "name": "projects_organization_id_organizations_id_fk",
          "tableFrom": "projects",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Projects are visible to an organization's owners/creator or its members": {
          "name": "Projects are visible to an organization's owners/creator or its members",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      (profile_id = auth.uid())\n      OR\n      (\n        organization_id IN (\n          SELECT organization_id\n          FROM organization_members\n          WHERE profile_id = auth.uid()\n        )\n      )\n    "
        },
        "Projects are manageable by an organization's owner/creator or its admins": {
          "name": "Projects are manageable by an organization's owner/creator or its admins",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "\n      (profile_id = auth.uid())\n      OR\n      (\n        organization_id IN (\n          SELECT organization_id\n          FROM organization_members\n          WHERE profile_id = auth.uid()\n            AND role = 'admin'\n        )\n      )\n    "
        }
      },
      "checkConstraints": {
        "check_project_owner": {
          "name": "check_project_owner",
          "value": "\n          (profile_id IS NOT NULL AND organization_id IS NULL)\n          OR \n          (profile_id IS NULL AND organization_id IS NOT NULL)\n        "
        }
      },
      "isRLSEnabled": false
    },
    "public.usage_counters": {
      "name": "usage_counters",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "project_id": {
          "name": "project_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "metric": {
          "name": "metric",
          "type": "rate_metric",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "granularity": {
          "name": "granularity",
          "type": "granularity",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "period_start": {
          "name": "period_start",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "quantity": {
          "name": "quantity",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_usage_counters_bucket": {
          "name": "ux_usage_counters_bucket",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "project_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "metric",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "granularity",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "period_start",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_counters_profile": {
          "name": "idx_usage_counters_profile",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_counters_org": {
          "name": "idx_usage_counters_org",
          "columns": [
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_counters_project": {
          "name": "idx_usage_counters_project",
          "columns": [
            {
              "expression": "project_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_counters_time": {
          "name": "idx_usage_counters_time",
          "columns": [
            {
              "expression": "period_start",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "usage_counters_profile_id_profiles_id_fk": {
          "name": "usage_counters_profile_id_profiles_id_fk",
          "tableFrom": "usage_counters",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "usage_counters_organization_id_organizations_id_fk": {
          "name": "usage_counters_organization_id_organizations_id_fk",
          "tableFrom": "usage_counters",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "usage_counters_project_id_projects_id_fk": {
          "name": "usage_counters_project_id_projects_id_fk",
          "tableFrom": "usage_counters",
          "tableTo": "projects",
          "columnsFrom": [
            "project_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Usage Counters are visible to the individual or org. members": {
          "name": "Usage Counters are visible to the individual or org. members",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      profile_id = auth.uid()\n      OR\n      organization_id IN (\n        SELECT organization_id FROM organization_members\n        WHERE profile_id = auth.uid()\n      )\n      OR\n      project_id IN (\n        SELECT id FROM projects\n        WHERE\n          profile_id = auth.uid()\n          OR organization_id IN (\n            SELECT organization_id FROM organization_members\n            WHERE profile_id = auth.uid()\n          )\n      )\n    "
        }
      },
      "checkConstraints": {
        "chk_usage_counters_one_owner": {
          "name": "chk_usage_counters_one_owner",
          "value": "\n      (\n        (profile_id    IS NOT NULL)::int\n      + (organization_id IS NOT NULL)::int\n      + (project_id    IS NOT NULL)::int\n      ) = 1\n    "
        }
      },
      "isRLSEnabled": false
    },
    "public.usage_records": {
      "name": "usage_records",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "profile_id": {
          "name": "profile_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "organization_id": {
          "name": "organization_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "project_id": {
          "name": "project_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "api_key_id": {
          "name": "api_key_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "NULL"
        },
        "metric": {
          "name": "metric",
          "type": "rate_metric",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "granularity": {
          "name": "granularity",
          "type": "granularity",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "recorded_at": {
          "name": "recorded_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_usage_records_profile": {
          "name": "idx_usage_records_profile",
          "columns": [
            {
              "expression": "profile_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_records_org": {
          "name": "idx_usage_records_org",
          "columns": [
            {
              "expression": "organization_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_records_project": {
          "name": "idx_usage_records_project",
          "columns": [
            {
              "expression": "project_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_records_metric": {
          "name": "idx_usage_records_metric",
          "columns": [
            {
              "expression": "metric",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_records_time": {
          "name": "idx_usage_records_time",
          "columns": [
            {
              "expression": "recorded_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_usage_records_proj_metric_time": {
          "name": "idx_usage_records_proj_metric_time",
          "columns": [
            {
              "expression": "project_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "metric",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "recorded_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "usage_records_profile_id_profiles_id_fk": {
          "name": "usage_records_profile_id_profiles_id_fk",
          "tableFrom": "usage_records",
          "tableTo": "profiles",
          "columnsFrom": [
            "profile_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "usage_records_organization_id_organizations_id_fk": {
          "name": "usage_records_organization_id_organizations_id_fk",
          "tableFrom": "usage_records",
          "tableTo": "organizations",
          "columnsFrom": [
            "organization_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "usage_records_project_id_projects_id_fk": {
          "name": "usage_records_project_id_projects_id_fk",
          "tableFrom": "usage_records",
          "tableTo": "projects",
          "columnsFrom": [
            "project_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "usage_records_api_key_id_api_keys_id_fk": {
          "name": "usage_records_api_key_id_api_keys_id_fk",
          "tableFrom": "usage_records",
          "tableTo": "api_keys",
          "columnsFrom": [
            "api_key_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Usage records are visible to individual or org. members": {
          "name": "Usage records are visible to individual or org. members",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n      profile_id = auth.uid()\n      OR\n      organization_id IN (\n        SELECT organization_id FROM organization_members\n        WHERE profile_id = auth.uid()\n      )\n      OR\n      project_id IN (\n        SELECT id FROM projects\n        WHERE\n          profile_id = auth.uid()\n          OR organization_id IN (\n            SELECT organization_id FROM organization_members\n            WHERE profile_id = auth.uid()\n          )\n      )\n    "
        }
      },
      "checkConstraints": {
        "chk_usage_records_one_owner": {
          "name": "chk_usage_records_one_owner",
          "value": "\n          (\n            (profile_id     IS NOT NULL)::int\n          + (organization_id IS NOT NULL)::int\n          + (project_id     IS NOT NULL)::int\n          ) = 1\n        "
        }
      },
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.account_type": {
      "name": "account_type",
      "schema": "public",
      "values": [
        "individual",
        "org_member"
      ]
    },
    "public.api_key_status": {
      "name": "api_key_status",
      "schema": "public",
      "values": [
        "active",
        "revoked"
      ]
    },
    "public.credit_ledger_reason": {
      "name": "credit_ledger_reason",
      "schema": "public",
      "values": [
        "purchase",
        "refund",
        "add",
        "auto_refill",
        "bonus",
        "other"
      ]
    },
    "public.granularity": {
      "name": "granularity",
      "schema": "public",
      "values": [
        "minute",
        "hour",
        "day",
        "month",
        "all_time"
      ]
    },
    "public.organization_role": {
      "name": "organization_role",
      "schema": "public",
      "values": [
        "admin",
        "member"
      ]
    },
    "public.plan_type": {
      "name": "plan_type",
      "schema": "public",
      "values": [
        "individual",
        "organization"
      ]
    },
    "public.rate_metric": {
      "name": "rate_metric",
      "schema": "public",
      "values": [
        "playground_total_requests",
        "api_requests",
        "api_tokens"
      ]
    },
    "public.tier_enum": {
      "name": "tier_enum",
      "schema": "public",
      "values": [
        "free",
        "tier1",
        "tier2",
        "tier3",
        "tier4",
        "tier5",
        "custom"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}